FROM node:22-slim AS base

ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN corepack enable

WORKDIR /app

COPY ./apps/api/package.json ./apps/api/package.json
COPY ./apps/api/pnpm-lock.yaml ./apps/api/pnpm-lock.yaml

COPY ./packages/common/package.json ./packages/common/package.json
COPY ./packages/common/pnpm-lock.yaml ./packages/common/pnpm-lock.yaml

FROM base AS prod-deps

# install python3, make, libvips, glib and gcc to build Sharp
RUN apt-get update -y
RUN apt-get install python3 make build-essential libglib2.0-dev libvips-dev -y

WORKDIR /app/apps/api
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --prod --frozen-lockfile
RUN pnpm rebuild sharp

WORKDIR /app/packages/common
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --prod --frozen-lockfile

FROM base AS build

WORKDIR /app
COPY . .

WORKDIR /app/packages/common
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile
RUN pnpm build


WORKDIR /app/apps/api
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile
RUN pnpm build

FROM base AS runtime

WORKDIR /app

# install shared library
RUN apt-get update -y
RUN apt-get install musl-dev -y
RUN ln -s /usr/lib/x86_64-linux-musl/libc.so /lib/libc.musl-x86_64.so.1

COPY --from=prod-deps /app/apps/api/node_modules ./node_modules
# copy the built common library into node_modules
RUN rm -r ./node_modules/common
COPY --from=build /app/packages/common ./node_modules/common
COPY --from=build /app/apps/api/dist ./dist
COPY --from=base /app/apps/api/package.json ./package.json
COPY --from=build /app/apps/api/src/runtime ./src/runtime

ARG NODE_ENV=production

EXPOSE 8080

CMD ["pnpm", "start:prod"]
